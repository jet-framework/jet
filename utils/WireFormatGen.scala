
object Main extends App {
val template = """  def mkCaseWireFormatGen[T, #GenericArgsAndTypes#](apply: (#GenericArgs#) => T, unapply: T => Option[(#GenericArgs#)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      #ToWireBody#
    }

    override def fromWire(in: DataInput): T = {
     #FromWireBody#
    }

  }"""

val zeroandone = """/**********************************************************************************
********** This file is generated by utils/WireFormatGen.scala ********************
**********************************************************************************/

import com.nicta.scoobi.{ DList, WireFormat, Grouping }
import java.io.{ DataInput, DataOutput }

class WireFormatsGen {
  def mkCaseWireFormatGen[T](apply: () => T, unapply: T => Boolean): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {}

    override def fromWire(in: DataInput): T = {
      apply()
    }

  }

  def mkCaseWireFormatGen[T, A1: WireFormat](apply: (A1) => T, unapply: T => Option[(A1)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: A1 = unapply(obj).get

      implicitly[WireFormat[A1]].toWire(v, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      apply(a1)
    }

  }
"""

	def makeVersionFor(i : Int) = {
		var out = template
	def replacer(target : String, replacement : String) { out = out.replaceAll("#"+target+"#", replacement) }
 		val range = (1 to i).toList
		val as = range.map("A"+_)
		val types = as.mkString(", ")
		var toWire = "val v: Product#Size#[#GenericArgs#] = unapply(obj).get\n"
		var toWireEntries = range.map(x => "implicitly[WireFormat[%s]].toWire(v._%s, out)".format("A"+x, x)).mkString("\n")
		replacer("ToWireBody", toWire+toWireEntries)
		val fromWireApply = "\n apply("+as.mkString(", ").toLowerCase()+")"
		val fromWire = range.map(x => "val a%s: A%s = implicitly[WireFormat[A%s]].fromWire(in)".format(x,x,x)).mkString("\n")
		replacer("FromWireBody", fromWire+fromWireApply)
		replacer("Size", ""+as.size)
		replacer("GenericArgs", types)
		replacer("GenericArgsAndTypes", as.map(_+": WireFormat").mkString(", "))

		out
	}
	println(zeroandone)
	for (x <- 2 to 22) {
		println(makeVersionFor(x))
	}

	println("}")
val example = 
"""  def mkCaseWireFormat[T, A1: WireFormat, A2: WireFormat](apply: (A1, A2) => T, unapply: T => Option[(A1, A2)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product2[A1, A2] = unapply(obj).get

      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      apply(a1, a2)
    }

    override def show(x: T): String = x.toString
  }
"""
}
