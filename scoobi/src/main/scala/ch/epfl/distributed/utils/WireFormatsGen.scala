/**
 * ********************************************************************************
 * ********* This file is generated by utils/WireFormatGen.scala ********************
 * ********************************************************************************
 */

package ch.epfl.distributed.utils
import com.nicta.scoobi.{ DList, WireFormat, Grouping }
import java.io.{ DataInput, DataOutput }

object WireFormatsGen {
  def mkCaseWireFormatGen[T](apply: () => T, unapply: T => Boolean): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {}

    override def fromWire(in: DataInput): T = {
      apply()
    }

  }

  def mkCaseWireFormatGen[T, A1: WireFormat](apply: (A1) => T, unapply: T => Option[(A1)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: A1 = unapply(obj).get

      implicitly[WireFormat[A1]].toWire(v, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      apply(a1)
    }

  }

  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat](apply: (A1, A2) => T, unapply: T => Option[(A1, A2)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product2[A1, A2] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      apply(a1, a2)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat](apply: (A1, A2, A3) => T, unapply: T => Option[(A1, A2, A3)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product3[A1, A2, A3] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      apply(a1, a2, a3)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat](apply: (A1, A2, A3, A4) => T, unapply: T => Option[(A1, A2, A3, A4)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product4[A1, A2, A3, A4] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      apply(a1, a2, a3, a4)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat](apply: (A1, A2, A3, A4, A5) => T, unapply: T => Option[(A1, A2, A3, A4, A5)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product5[A1, A2, A3, A4, A5] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      apply(a1, a2, a3, a4, a5)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat](apply: (A1, A2, A3, A4, A5, A6) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product6[A1, A2, A3, A4, A5, A6] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product7[A1, A2, A3, A4, A5, A6, A7] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product8[A1, A2, A3, A4, A5, A6, A7, A8] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product9[A1, A2, A3, A4, A5, A6, A7, A8, A9] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat, A17: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
      implicitly[WireFormat[A17]].toWire(v._17, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      val a17: A17 = implicitly[WireFormat[A17]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat, A17: WireFormat, A18: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
      implicitly[WireFormat[A17]].toWire(v._17, out)
      implicitly[WireFormat[A18]].toWire(v._18, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      val a17: A17 = implicitly[WireFormat[A17]].fromWire(in)
      val a18: A18 = implicitly[WireFormat[A18]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat, A17: WireFormat, A18: WireFormat, A19: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
      implicitly[WireFormat[A17]].toWire(v._17, out)
      implicitly[WireFormat[A18]].toWire(v._18, out)
      implicitly[WireFormat[A19]].toWire(v._19, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      val a17: A17 = implicitly[WireFormat[A17]].fromWire(in)
      val a18: A18 = implicitly[WireFormat[A18]].fromWire(in)
      val a19: A19 = implicitly[WireFormat[A19]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat, A17: WireFormat, A18: WireFormat, A19: WireFormat, A20: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
      implicitly[WireFormat[A17]].toWire(v._17, out)
      implicitly[WireFormat[A18]].toWire(v._18, out)
      implicitly[WireFormat[A19]].toWire(v._19, out)
      implicitly[WireFormat[A20]].toWire(v._20, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      val a17: A17 = implicitly[WireFormat[A17]].fromWire(in)
      val a18: A18 = implicitly[WireFormat[A18]].fromWire(in)
      val a19: A19 = implicitly[WireFormat[A19]].fromWire(in)
      val a20: A20 = implicitly[WireFormat[A20]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat, A17: WireFormat, A18: WireFormat, A19: WireFormat, A20: WireFormat, A21: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
      implicitly[WireFormat[A17]].toWire(v._17, out)
      implicitly[WireFormat[A18]].toWire(v._18, out)
      implicitly[WireFormat[A19]].toWire(v._19, out)
      implicitly[WireFormat[A20]].toWire(v._20, out)
      implicitly[WireFormat[A21]].toWire(v._21, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      val a17: A17 = implicitly[WireFormat[A17]].fromWire(in)
      val a18: A18 = implicitly[WireFormat[A18]].fromWire(in)
      val a19: A19 = implicitly[WireFormat[A19]].fromWire(in)
      val a20: A20 = implicitly[WireFormat[A20]].fromWire(in)
      val a21: A21 = implicitly[WireFormat[A21]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21)
    }

  }
  def mkCaseWireFormatGen[T, A1: WireFormat, A2: WireFormat, A3: WireFormat, A4: WireFormat, A5: WireFormat, A6: WireFormat, A7: WireFormat, A8: WireFormat, A9: WireFormat, A10: WireFormat, A11: WireFormat, A12: WireFormat, A13: WireFormat, A14: WireFormat, A15: WireFormat, A16: WireFormat, A17: WireFormat, A18: WireFormat, A19: WireFormat, A20: WireFormat, A21: WireFormat, A22: WireFormat](apply: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => T, unapply: T => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]): WireFormat[T] = new WireFormat[T] {

    override def toWire(obj: T, out: DataOutput) {
      val v: Product22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22] = unapply(obj).get
      implicitly[WireFormat[A1]].toWire(v._1, out)
      implicitly[WireFormat[A2]].toWire(v._2, out)
      implicitly[WireFormat[A3]].toWire(v._3, out)
      implicitly[WireFormat[A4]].toWire(v._4, out)
      implicitly[WireFormat[A5]].toWire(v._5, out)
      implicitly[WireFormat[A6]].toWire(v._6, out)
      implicitly[WireFormat[A7]].toWire(v._7, out)
      implicitly[WireFormat[A8]].toWire(v._8, out)
      implicitly[WireFormat[A9]].toWire(v._9, out)
      implicitly[WireFormat[A10]].toWire(v._10, out)
      implicitly[WireFormat[A11]].toWire(v._11, out)
      implicitly[WireFormat[A12]].toWire(v._12, out)
      implicitly[WireFormat[A13]].toWire(v._13, out)
      implicitly[WireFormat[A14]].toWire(v._14, out)
      implicitly[WireFormat[A15]].toWire(v._15, out)
      implicitly[WireFormat[A16]].toWire(v._16, out)
      implicitly[WireFormat[A17]].toWire(v._17, out)
      implicitly[WireFormat[A18]].toWire(v._18, out)
      implicitly[WireFormat[A19]].toWire(v._19, out)
      implicitly[WireFormat[A20]].toWire(v._20, out)
      implicitly[WireFormat[A21]].toWire(v._21, out)
      implicitly[WireFormat[A22]].toWire(v._22, out)
    }

    override def fromWire(in: DataInput): T = {
      val a1: A1 = implicitly[WireFormat[A1]].fromWire(in)
      val a2: A2 = implicitly[WireFormat[A2]].fromWire(in)
      val a3: A3 = implicitly[WireFormat[A3]].fromWire(in)
      val a4: A4 = implicitly[WireFormat[A4]].fromWire(in)
      val a5: A5 = implicitly[WireFormat[A5]].fromWire(in)
      val a6: A6 = implicitly[WireFormat[A6]].fromWire(in)
      val a7: A7 = implicitly[WireFormat[A7]].fromWire(in)
      val a8: A8 = implicitly[WireFormat[A8]].fromWire(in)
      val a9: A9 = implicitly[WireFormat[A9]].fromWire(in)
      val a10: A10 = implicitly[WireFormat[A10]].fromWire(in)
      val a11: A11 = implicitly[WireFormat[A11]].fromWire(in)
      val a12: A12 = implicitly[WireFormat[A12]].fromWire(in)
      val a13: A13 = implicitly[WireFormat[A13]].fromWire(in)
      val a14: A14 = implicitly[WireFormat[A14]].fromWire(in)
      val a15: A15 = implicitly[WireFormat[A15]].fromWire(in)
      val a16: A16 = implicitly[WireFormat[A16]].fromWire(in)
      val a17: A17 = implicitly[WireFormat[A17]].fromWire(in)
      val a18: A18 = implicitly[WireFormat[A18]].fromWire(in)
      val a19: A19 = implicitly[WireFormat[A19]].fromWire(in)
      val a20: A20 = implicitly[WireFormat[A20]].fromWire(in)
      val a21: A21 = implicitly[WireFormat[A21]].fromWire(in)
      val a22: A22 = implicitly[WireFormat[A22]].fromWire(in)
      apply(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22)
    }

  }
}
